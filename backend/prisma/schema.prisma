generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model actions {
  id                                                                Int                 @id @default(autoincrement()) @db.UnsignedInt
  action_name                                                       String              @db.VarChar(60)
  points                                                            Int                 @db.UnsignedInt
  action_type                                                       actions_action_type
  action_description                                                String              @db.VarChar(100)
  arabic_action_name                                                String              @db.VarChar(100)
  composite_actions_composite_actions_associated_action_idToactions composite_actions[] @relation("composite_actions_associated_action_idToactions")
  composite_actions_composite_actions_action_idToactions            composite_actions[] @relation("composite_actions_action_idToactions")
  logs                                                              logs[]
}

model departments {
  id               Int                @id @default(autoincrement()) @db.UnsignedInt
  name             String             @db.VarChar(50)
  departments_logs departments_logs[]
}

model departments_logs {
  id                Int         @id @default(autoincrement()) @db.UnsignedInt
  department_id     Int         @db.UnsignedInt
  mf                Int         @default(1)
  attendants_number Int?        @db.UnsignedInt
  log_id            Int         @db.UnsignedInt
  departments       departments @relation(fields: [department_id], references: [id], onDelete: Cascade, map: "departments_logs_ibfk_1")
  logs              logs        @relation(fields: [log_id], references: [id], onDelete: Cascade, map: "departments_logs_ibfk_2")

  @@unique([log_id, department_id], map: "departments_logs_unique")
  @@index([department_id], map: "departments_logs_departments_FK")
}

model logs {
  id               Int                @id @default(autoincrement()) @db.UnsignedInt
  action_id        Int                @db.UnsignedInt
  start_date       DateTime           @db.Date
  end_date         DateTime           @db.Date
  event_id         Int?               @db.UnsignedInt
  departments_logs departments_logs[]
  events           events?            @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_events")
  actions          actions            @relation(fields: [action_id], references: [id], onDelete: Cascade, map: "logs_ibfk_1")
  members_logs     members_logs[]
  modifications    modifications[]

  @@index([action_id], map: "action_id")
  @@index([event_id], map: "fk_events")
}

model members {
  id           Int            @id @default(autoincrement()) @db.UnsignedInt
  name         String         @db.VarChar(50)
  email        String?        @unique(map: "email") @db.VarChar(100)
  phone_number String?        @unique(map: "phone_number") @db.VarChar(20)
  uni_id       String         @unique(map: "uni_id") @db.VarChar(50)
  gender       members_gender
  members_logs members_logs[]
}

model members_logs {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  member_id Int       @db.UnsignedInt
  log_id    Int       @db.UnsignedInt
  absence   absence[]
  members   members   @relation(fields: [member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "members_logs_ibfk_1")
  logs      logs      @relation(fields: [log_id], references: [id], onDelete: Cascade, map: "members_logs_ibfk_2")

  @@unique([log_id, member_id], map: "members_logs_unique")
  @@index([member_id], map: "fk_members_id")
}

model modifications {
  id     Int                @id @default(autoincrement()) @db.UnsignedInt
  log_id Int                @db.UnsignedInt
  type   modifications_type
  value  Int                @db.UnsignedInt
  logs   logs               @relation(fields: [log_id], references: [id], onDelete: Cascade, map: "modifications_ibfk_1")

  @@index([log_id], map: "log_id")
}

model events {
  id   Int    @id @default(autoincrement()) @db.UnsignedInt
  name String @unique(map: "events_unique") @db.VarChar(150)
  logs logs[]
}

model absence {
  id            Int           @id @default(autoincrement()) @db.UnsignedInt
  date          DateTime      @db.Date
  member_log_id Int?          @db.UnsignedInt
  members_logs  members_logs? @relation(fields: [member_log_id], references: [id], onDelete: Cascade, map: "absence_members_logs_FK")

  @@index([member_log_id], map: "absence_members_logs_FK")
}

model composite_actions {
  id                                                      Int     @id @default(autoincrement())
  action_id                                               Int     @db.UnsignedInt
  associated_action_id                                    Int     @db.UnsignedInt
  actions_composite_actions_associated_action_idToactions actions @relation("composite_actions_associated_action_idToactions", fields: [associated_action_id], references: [id], onDelete: Cascade, map: "composite_actions_actions_FK")
  actions_composite_actions_action_idToactions            actions @relation("composite_actions_action_idToactions", fields: [action_id], references: [id], map: "fk_action_id")

  @@index([associated_action_id], map: "composite_actions_actions_FK")
  @@index([action_id], map: "fk_action_id")
}

view members_points {
  member_id         Int    @default(0) @db.UnsignedInt
  member_name       String @db.VarChar(50)
  member_log_id     Int    @default(0) @db.UnsignedInt
  log_id            Int    @default(0) @db.UnsignedInt
  event_name        String @db.VarChar(150)
  points_per_action Int    @db.UnsignedInt
}

view departments_points {
  department_id     Int    @default(0) @db.UnsignedInt
  department_name   String @db.VarChar(50)
  department_log_id Int    @default(0) @db.UnsignedInt
  log_id            Int    @default(0) @db.UnsignedInt
  event_name        String @db.VarChar(150)
  points_per_action Int    @db.UnsignedInt
}

enum modifications_type {
  bonus
  discount
}

enum actions_action_type {
  composite
  department
  member
}

enum members_gender {
  Male
  Female
}
